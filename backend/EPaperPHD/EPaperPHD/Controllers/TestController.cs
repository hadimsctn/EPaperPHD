using EPaperPHD.Model;
using EPaperPHD.Model.Test;
using EPaperPHD.Service.MqttServer;
using Microsoft.AspNetCore.Mvc;
using System.Collections;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Text;

namespace EPaperPHD.Web.Controllers
{
    [ApiController, Route("api/Test")]
    public class TestController : ControllerBase
    {
        private readonly IMqttServerService mqttServerService;

        public TestController(IMqttServerService mqttServerService)
        {
            this.mqttServerService = mqttServerService;
        }
        [HttpPost, Route("TestController/publisher")]
        public async Task<bool> PublishDatatoMQTTServer()
        {
            WeatherForecast weatherForecast = new WeatherForecast
            {
                TemperatureC = 25,
                Summary = "dsfs",
            };
            return await mqttServerService.PublishToMqttServer(weatherForecast, "EpaperPHD/UpdateAll");
        }
        [HttpPost, Route("TestController/testData")]
        public async Task<EpaperPHDDisplayModel> PublishDataDefault()
        {
            EpaperPHDDisplayModel Response = new();
            EpaperPHDDisplayModel model = new EpaperPHDDisplayModel()
            {
                DateOfBirth = "12/08/2002",
                Name = "Name",
                Class = "Class",
                Major = "dsd",
            };
            return Response;
        }
        [HttpPost, Route("TestController/testConvertImage")]
        public async Task<bool> ConvertImageToMonochrome()
        {
            // Your hex values
            byte[] hexValues = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0xbf, 0x3f, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x7c, 0x4f, 0xff, 0xff, 0xff,
0xff, 0xff, 0xfa, 0xf6, 0xd7, 0x0b, 0xff, 0xff, 0xff,
0xff, 0xff, 0xfd, 0xfd, 0xd8, 0xab, 0xff, 0xff, 0xff,
0xff, 0xff, 0x7e, 0xed, 0x52, 0xaf, 0xff, 0xff, 0xff,
0xff, 0xff, 0x3f, 0xda, 0xa1, 0x4f, 0xff, 0xff, 0xff,
0xff, 0xfc, 0x5e, 0x5a, 0x44, 0xbf, 0xff, 0xff, 0xff,
0xff, 0xfd, 0x2f, 0xe9, 0x51, 0x5f, 0xff, 0xff, 0xff,
0xff, 0xfc, 0x43, 0x0f, 0xfe, 0x6b, 0xff, 0xff, 0xff,
0xff, 0xf3, 0x28, 0x77, 0xff, 0xbf, 0xff, 0xff, 0xff,
0xff, 0xfc, 0x83, 0xfd, 0xff, 0xd5, 0xbf, 0xff, 0xff,
0xff, 0xfe, 0xd5, 0xaf, 0x7f, 0x7a, 0xff, 0xff, 0xff,
0xff, 0xff, 0x0e, 0xfd, 0xed, 0xff, 0xfb, 0xf7, 0xdf,
0xff, 0xff, 0xdb, 0xef, 0xff, 0xf5, 0x7f, 0xdf, 0xff,
0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xbf, 0xff, 0xff,
0xff, 0xff, 0xd6, 0xfd, 0xff, 0xfe, 0xf7, 0xff, 0xff,
0xff, 0xef, 0xbf, 0xff, 0xdf, 0xfb, 0x5f, 0xff, 0xff,
0xff, 0xfe, 0xff, 0xef, 0xfe, 0xff, 0xff, 0x7f, 0xff,
0xff, 0xbf, 0xdb, 0xbf, 0xff, 0xff, 0xaf, 0xf7, 0xff,
0xff, 0xfb, 0x7f, 0xff, 0x7f, 0xde, 0xdf, 0xff, 0xbd,
0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf7,
0xff, 0xde, 0xfb, 0xef, 0xf7, 0xfb, 0xaf, 0xee, 0xff,
0xfe, 0xff, 0x5f, 0xbb, 0xbf, 0x5f, 0xdb, 0xff, 0xff,
0xff, 0xed, 0xfe, 0xfe, 0xfb, 0xff, 0x6f, 0xff, 0xff,
0xff, 0xfe, 0xb7, 0xdb, 0xef, 0xed, 0xf7, 0xff, 0xef,
0xff, 0x77, 0x7d, 0xff, 0xbd, 0xbf, 0xde, 0xef, 0x7f,
0xfb, 0xfd, 0xd7, 0x5b, 0xff, 0xdb, 0x6b, 0xff, 0xfd,
0xff, 0xde, 0xbd, 0xfe, 0xaa, 0xef, 0xef, 0xff, 0xff,
0xff, 0x7e, 0xef, 0x6d, 0xff, 0x5d, 0xb7, 0x7f, 0xf7,
0xff, 0xfb, 0x5b, 0xf7, 0xbb, 0xdb, 0xdf, 0xff, 0xdf,
0xfd, 0xfe, 0xed, 0x5f, 0xfd, 0x6e, 0x6b, 0xfd, 0xff,
0xff, 0xdd, 0x5d, 0xfe, 0xe0, 0x1b, 0xae, 0xef, 0xff,
0xff, 0xff, 0x6b, 0xbb, 0xd2, 0xed, 0x6b, 0xff, 0xff,
0xfb, 0x7a, 0xb7, 0xff, 0xfb, 0x73, 0xdf, 0xff, 0xfd,
0xff, 0xff, 0xac, 0x2f, 0xff, 0xdd, 0x6b, 0x7d, 0xb7,
0xff, 0xde, 0xad, 0x1f, 0xfd, 0xea, 0xad, 0xf7, 0xff,
0xff, 0x7f, 0xd2, 0xdf, 0xff, 0x6d, 0x57, 0xff, 0xff,
0xed, 0xfd, 0xab, 0x7f, 0xef, 0xf2, 0xad, 0xbf, 0xff,
0xff, 0xff, 0xa7, 0xf7, 0xbd, 0xad, 0xab, 0xff, 0xf7,
0xff, 0xff, 0x5b, 0xbf, 0xff, 0xeb, 0x57, 0xfe, 0xff,
0xf7, 0xdd, 0xea, 0xff, 0xff, 0xdd, 0x5f, 0x7b, 0xfd,
0xff, 0x7f, 0x8b, 0xb7, 0xff, 0x6e, 0xcb, 0xdf, 0xdf,
0xff, 0xff, 0xe5, 0xfe, 0xa7, 0xdd, 0xad, 0xff, 0xff,
0xed, 0xf6, 0xd5, 0x79, 0x5f, 0xdf, 0x6b, 0xbf, 0xbf,
0xff, 0xdf, 0xd5, 0x5a, 0xbf, 0x75, 0xad, 0xdd, 0xfb,
0xff, 0x7e, 0xaa, 0x12, 0xfe, 0x9f, 0x56, 0xf7, 0xff,
0xdb, 0xff, 0xad, 0x55, 0xfd, 0xfd, 0xb7, 0xef, 0xbf,
0xff, 0xff, 0xad, 0x29, 0xf6, 0x9f, 0xab, 0x7f, 0xf7,
0xef, 0xff, 0xaa, 0x90, 0xbb, 0x76, 0xb7, 0x76, 0xff,
0xfd, 0xff, 0xae, 0xa5, 0x57, 0xc8, 0xd9, 0xff, 0xdf,
0xd7, 0xdb, 0xdb, 0x21, 0xfa, 0xa3, 0x57, 0x35, 0xfd,
0xfd, 0xff, 0xea, 0x4c, 0xaf, 0x64, 0xad, 0xdf, 0xf7,
0xff, 0xff, 0xbe, 0x97, 0x75, 0xcb, 0x75, 0x7e, 0xff,
0xf6, 0xfe, 0xf1, 0x1d, 0xae, 0xa5, 0x52, 0xbb, 0xff,
0xff, 0x7f, 0xd2, 0x5e, 0xb5, 0xf2, 0xbb, 0x5f, 0xbb,
0xdf, 0xed, 0xad, 0x37, 0xdf, 0xea, 0xe9, 0xae, 0xff,
0xfb, 0x78, 0x8e, 0x5b, 0x7f, 0x4a, 0xdd, 0x6f, 0xef,
0xef, 0xb0, 0x2a, 0x7f, 0xfb, 0xea, 0x55, 0xbd, 0xff,
0xfa, 0xc2, 0x9e, 0xd5, 0xbf, 0x95, 0x7a, 0xd7, 0x7f,
0xff, 0xa0, 0x3f, 0x7f, 0xdb, 0xca, 0xfd, 0x6e, 0xef,
0xde, 0xd5, 0x3d, 0xfd, 0x7f, 0xa5, 0xdf, 0x57, 0xfd,
0xfb, 0xe0, 0xb6, 0xf7, 0xff, 0x95, 0xff, 0xb6, 0xb7,
0xff, 0x78, 0x7f, 0xdd, 0x7f, 0xd5, 0x7e, 0xf6, 0xff,
0xdf, 0x64, 0x2b, 0xf5, 0xff, 0x93, 0xff, 0xae, 0xef,
0xfd, 0x18, 0x16, 0xfd, 0xfb, 0xca, 0x5d, 0xf6, 0xbb,
0xf7, 0xd1, 0x03, 0xff, 0xdf, 0x95, 0x6f, 0xdb, 0xf7,
0xff, 0x84, 0x0b, 0xff, 0xff, 0xca, 0xaf, 0xed, 0x5f,
0xff, 0xa2, 0x21, 0xfb, 0xff, 0x85, 0x5f, 0x77, 0x77,
0xfd, 0xc4, 0x08, 0xbf, 0xc5, 0xd2, 0xbd, 0xeb, 0xfb,
0xdf, 0xc0, 0xa4, 0x55, 0x26, 0xc5, 0x5f, 0xf7, 0x5b,
0xff, 0x4a, 0x55, 0x2a, 0x11, 0x42, 0x7d, 0xdb, 0x7f,
0xfd, 0xc0, 0x50, 0x80, 0xa8, 0x8a, 0xb7, 0xad, 0xeb,
0xff, 0xca, 0xaa, 0x56, 0x56, 0x24, 0xff, 0x56, 0xbd,
0xff, 0x81, 0x24, 0xa9, 0x5a, 0x01, 0x5e, 0xaa, 0xef,
0xfb, 0xc8, 0xa9, 0x64, 0xaa, 0x8a, 0xf4, 0xea, 0xfb,
0xff, 0x05, 0x25, 0x52, 0x54, 0x24, 0xad, 0x3b, 0x6f,
0xfb, 0xc0, 0xaa, 0xad, 0x58, 0x82, 0xdc, 0xe9, 0xbd,
0xff, 0x0a, 0x6b, 0x24, 0xad, 0x29, 0x7c, 0xb6, 0xd7,
0xfb, 0xa1, 0x2f, 0xfa, 0xa4, 0x82, 0x9a, 0xd4, 0x2e,
0xef, 0x00, 0x95, 0x35, 0xd5, 0x50, 0xfc, 0x72, 0xbf,
0xfd, 0x88, 0x55, 0xae, 0x5a, 0x05, 0x3c, 0xda, 0x95,
0xef, 0x08, 0x08, 0xd5, 0x54, 0xa0, 0xd9, 0x69, 0x4f,
0xfb, 0x12, 0x14, 0x0a, 0xa0, 0x00, 0xbc, 0xda, 0x5f,
0xee, 0x08, 0x05, 0x54, 0x25, 0x08, 0xbc, 0xed, 0x25,
0xff, 0x24, 0x11, 0x05, 0x00, 0x22, 0x7a, 0xac, 0x97,
0xd8, 0x12, 0x48, 0xb0, 0x48, 0x00, 0xbc, 0xea, 0x4d,
0xf6, 0x48, 0x02, 0x45, 0x00, 0x02, 0x6c, 0x75, 0x2f,
0xd0, 0x15, 0x00, 0x00, 0x00, 0x90, 0x7e, 0x6e, 0x97,
0x88, 0x12, 0x09, 0x49, 0x02, 0x02, 0x3a, 0x72, 0x4b,
0xc0, 0x18, 0x20, 0x00, 0x20, 0x05, 0x5d, 0x5e, 0x97,
0xc0, 0x85, 0x00, 0x22, 0x00, 0x21, 0x7e, 0x33, 0x2b,
0xe2, 0x14, 0x04, 0x80, 0x92, 0x04, 0x37, 0x3d, 0x57 };

            // Size of the bitmap (128x128)
            int width = 72;
            int height = 96;

            // Create a new bitmap
            Bitmap bitmap = new Bitmap(width, height);

            // Set each pixel based on the hex values
            for (int y = 0; y < height; y++)
            {
                for (int x = 0; x < width; x++)
                {
                    // Get the index in the hex array
                    int index = y * width / 8 + x / 8;

                    // Get the bit position within the byte
                    int bitPosition = 7 - (x % 8);

                    // Check if the bit is set
                    bool isBitSet = (hexValues[index] & (1 << bitPosition)) != 0;

                    // Set the pixel color
                    Color pixelColor = isBitSet ? Color.White : Color.Black;

                    // Set the pixel in the bitmap
                    bitmap.SetPixel(x, y, pixelColor);
                }
            }

            // Save or display the bitmap
            bitmap.Save("output.bmp");
            bitmap.Dispose();
            return true;
        }
    }
}
