#include <Arduino.h>
// -----------------------------------------------------------------------------------------------------------------------------
// Dependencies: GxEPD2 của
// Tested:  ESP32-C3 DevKitM-1 dual USB, ESP32-C3 SuperMini
// Result: https://youtu.be/yVmRT403PUM, https://youtu.be/R4bcl01nT94
// Display:
//      -------x----->
//      | ---------------------------------------------------------------------------
//      | |                                                                         |
//      y |                                                                         |
//      | |                                                                         |
//      - |                                                                         |
//        |                                                                         |
//        |                                                                         |
//        |                                                                         |
//        |                                                                         |
//        ---------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------
// base class GxEPD2_GFX can be used to pass references or pointers to the display instance as parameter, uses ~1.2k more code
// enable or disable GxEPD2_GFX base class
#define ENABLE_GxEPD2_GFX 0

#include <GxEPD2_BW.h>
// #include <GxEPD2_3C.h>
#include <Fonts/FreeMonoBold9pt7b.h>
#include <WiFi.h>
#include <PubSubClient.h>

// #define ESP32_C3
#define ESP32_C3_SUPERMINI

#if defined(ESP32_C3)
// #define Porting_Sample
#define Porting_Continous
#if defined(Porting_Sample)
// Cắm y hệt như code mẫu. Như video https://youtu.be/yVmRT403PUM
// ESP32-C3 SS=7,SCL(SCK)=4,SDA(MOSI)=6,BUSY=3,RST=2,DC=1
#define SS 7
#define SCL 4 // SCK
#define SDA 6 // MOSI
#define BUSY 3
#define RST 2
#define DC 1
#elif defined(Porting_Continous)
#define BUSY 2 // configuable test ok: pin 2, 3
#define RST 3  // configuable test ok: pin 0, 2, 3
#define DC 21  // configuable test ok: pin 1, 5, 7, 8 10, 18, 19, 20, 21 Not ok: 9
#define SS 1   // CS         //configuable test ok: pin 0, 1, 2, 3, 7, 8, 10, 18, 19, 20 (la rx0 nen phai rut ra khi nap code), 21. Not ok: 5, 9,11
#define SCL 4  // SCK       //configuable test ok: pin 4. Not ok 0, 5, 7
#define SDA 6  // MOSI
#endif
#elif defined(ESP32_C3_SUPERMINI)
// https://youtu.be/R4bcl01nT94
#define LED_BUILTIN 8
#define SCL 4 // SCK
#define SDA 6 // MOSI

#define SS 7
#define BUSY 3
#define RST 2
#define DC 1
#endif

// 2.13'' EPD Module
// GxEPD2_BW<GxEPD2_213_BN, GxEPD2_213_BN::HEIGHT> display(GxEPD2_213_BN(/*CS=5*/ SS, /*DC=*/ 1, /*RST=*/ 2, /*BUSY=*/ 3)); // DEPG0213BN 122x250, SSD1680
// GxEPD2_3C<GxEPD2_213_Z98c, GxEPD2_213_Z98c::HEIGHT> display(GxEPD2_213_Z98c(/*CS=5*/ SS, /*DC=*/ 1, /*RST=*/ 2, /*BUSY=*/ 3)); // GDEY0213Z98 122x250, SSD1680

// 2.9'' EPD Module
GxEPD2_BW<GxEPD2_290_BS, GxEPD2_290_BS::HEIGHT> display(GxEPD2_290_BS(SS, DC, RST, BUSY)); // DEPG0290BS 128x296, SSD1680
// GxEPD2_3C<GxEPD2_290_C90c, GxEPD2_290_C90c::HEIGHT> display(GxEPD2_290_C90c(/*CS=5*/ SS, /*DC=*/ 1, /*RST=*/ 2, /*BUSY=*/ 3)); // GDEM029C90 128x296, SSD1680

const char *ssid = "Bún đậu";          // Enter your WiFi name
const char *password = "phaicomamtom"; // Enter WiFi password
const char *mqtt_broker = "broker.emqx.io";
const char *topic = "esp32/test/hello/vietnamhaha";
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;
const char * tempMe="";
const unsigned char gImage_ggg[] = { 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb5, 0xb4, 
0xad, 0x56, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x55, 0xad, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xb6, 0xaa, 0xab, 0x6b, 0x6a, 0xaa, 0xb6, 0xb6, 0xb6, 0xb6, 0xb4, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xad, 0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0x6a, 0xaa, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x55, 0x54, 0x95, 0xb5, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xb5, 0x56, 0xaa, 0xc0, 0x00, 0x2a, 0xaa, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0xaa, 0xb6, 0x80, 0x00, 0x0a, 0xdb, 0x5b, 0x5b, 0x58, 
0xad, 0xaa, 0xaa, 0xa8, 0x00, 0x00, 0x05, 0x55, 0x6a, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x54, 0x08, 0x00, 0x01, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xa0, 0x00, 0x10, 0x80, 0x55, 0x55, 0x55, 0x54, 
0x55, 0x55, 0x55, 0x40, 0x00, 0x40, 0x00, 0x15, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xab, 0x00, 0x40, 0x00, 0x00, 0x0a, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0xb5, 0x04, 0x00, 0x00, 0x08, 0x0a, 0xaa, 0xad, 0x54, 
0xb6, 0xad, 0x55, 0x00, 0x02, 0x00, 0x00, 0x8a, 0xaa, 0xb2, 0xb4, 
0x55, 0x55, 0x54, 0x00, 0x08, 0x00, 0x40, 0x05, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0x10, 0x20, 0x44, 0x00, 0x05, 0xaa, 0xab, 0x54, 
0x55, 0x55, 0x56, 0x41, 0x01, 0x11, 0x08, 0x05, 0x56, 0xad, 0x54, 
0xaa, 0xaa, 0xaa, 0x00, 0xad, 0x4a, 0x55, 0x12, 0xaa, 0xaa, 0xa8, 
0x55, 0x5a, 0xaa, 0x06, 0xbb, 0xfd, 0xaa, 0x05, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xd4, 0x0a, 0xee, 0xaf, 0xf5, 0x82, 0xaa, 0xaa, 0xa8, 
0x55, 0x6a, 0xaa, 0x2b, 0x5f, 0xfb, 0x5e, 0x45, 0x55, 0x6a, 0xac, 
0xad, 0x95, 0x55, 0x15, 0xf5, 0xef, 0xf5, 0x92, 0xad, 0x95, 0x50, 
0x55, 0x6a, 0xaa, 0x56, 0xbf, 0x7d, 0xae, 0xc5, 0x6a, 0x6a, 0xac, 
0xaa, 0x95, 0x54, 0x2d, 0xef, 0xef, 0xfb, 0x52, 0xaa, 0xaa, 0xd4, 
0x55, 0x6a, 0xaa, 0xb7, 0x7b, 0x7d, 0x5d, 0x45, 0x55, 0x55, 0x54, 
0xaa, 0xab, 0x56, 0xab, 0xbf, 0xf7, 0xf6, 0xf2, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x5a, 0x5d, 0xed, 0xbf, 0xdb, 0x45, 0x55, 0x56, 0xa8, 
0xb6, 0xaa, 0xaa, 0x6a, 0xbf, 0xfe, 0xa5, 0x55, 0xaa, 0xda, 0xac, 
0x55, 0x55, 0x55, 0x5a, 0x83, 0x77, 0x2a, 0xb2, 0xad, 0x55, 0x50, 
0xaa, 0xaa, 0xaa, 0x6b, 0x7d, 0xfd, 0xfe, 0xaa, 0xaa, 0xaa, 0xac, 
0x55, 0x55, 0x55, 0x55, 0xd7, 0x56, 0xab, 0xaa, 0xaa, 0xaa, 0xa8, 
0xaa, 0xaa, 0xaa, 0x6f, 0x7d, 0xff, 0xfd, 0x62, 0xaa, 0xaa, 0xa8, 
0x55, 0x5b, 0x5a, 0xba, 0xab, 0x75, 0x03, 0xba, 0xaa, 0xaa, 0xac, 
0xaa, 0xaa, 0xae, 0xd6, 0x8d, 0xde, 0xcc, 0xd5, 0x55, 0x55, 0x50, 
0x55, 0x55, 0x52, 0x7a, 0xcb, 0x7b, 0xda, 0xab, 0x6a, 0xaa, 0xac, 
0xad, 0xaa, 0xaf, 0x55, 0x7f, 0xf7, 0x6f, 0xf6, 0xab, 0x5a, 0xd4, 
0x55, 0x55, 0x56, 0xbf, 0xdb, 0x5d, 0xfa, 0xab, 0x55, 0x6a, 0xa8, 
0xaa, 0xaa, 0xb6, 0xd5, 0xff, 0xf7, 0xbf, 0xd5, 0x55, 0x55, 0x54, 
0x55, 0x55, 0x57, 0x7f, 0x6d, 0x7b, 0xed, 0xb7, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xab, 0x57, 0xff, 0xdd, 0xff, 0xea, 0xaa, 0xaa, 0xa8, 
0x55, 0x56, 0xd6, 0xbd, 0xdd, 0x77, 0x76, 0xb6, 0xad, 0x55, 0x54, 
0xb6, 0xaa, 0xab, 0xb7, 0xff, 0xdd, 0xdf, 0xd5, 0x55, 0x55, 0x68, 
0x55, 0x55, 0x55, 0xbf, 0x7a, 0xfa, 0xfe, 0xed, 0x55, 0x55, 0x94, 
0xaa, 0xb5, 0x55, 0xab, 0xef, 0x7f, 0x7b, 0xa5, 0x6a, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x7e, 0xfd, 0xaa, 0xef, 0x75, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xab, 0xfb, 0x75, 0xbd, 0xd5, 0x55, 0xad, 0x58, 
0x55, 0x55, 0x55, 0x5f, 0x5e, 0xde, 0xf7, 0x55, 0x55, 0x55, 0x64, 
0xaa, 0xaa, 0xb6, 0xab, 0xf7, 0xf7, 0xbd, 0xaa, 0xaa, 0xaa, 0x98, 
0x55, 0x55, 0xaa, 0xbd, 0xbd, 0x7a, 0xee, 0xed, 0x55, 0x55, 0x68, 
0xad, 0xaa, 0xaa, 0xd6, 0xef, 0xdf, 0x77, 0x55, 0x6a, 0xaa, 0xa8, 
0x55, 0x5a, 0xaa, 0xaf, 0xba, 0xa9, 0xba, 0xd5, 0x55, 0x55, 0x54, 
0xaa, 0xaa, 0xaa, 0xb5, 0xed, 0x6d, 0x57, 0x55, 0x56, 0xb6, 0xa8, 
0x55, 0x55, 0x55, 0x56, 0xbb, 0xb6, 0xed, 0xaa, 0xaa, 0xaa, 0xa8, 
0xaa, 0xaa, 0xaa, 0xad, 0xed, 0x7d, 0x5a, 0xb5, 0x55, 0x55, 0x54, 
0x55, 0x55, 0x55, 0x56, 0xbe, 0xd6, 0xf7, 0x55, 0xaa, 0xaa, 0xa8, 
0xb6, 0xaa, 0xb6, 0xab, 0xd7, 0x55, 0xba, 0xaa, 0xaa, 0xaa, 0xb4, 
0x55, 0x55, 0x55, 0x55, 0x7b, 0xff, 0xd5, 0x55, 0x55, 0x55, 0x54, 
0xaa, 0xad, 0xaa, 0xad, 0xae, 0xdd, 0x76, 0xd5, 0x5a, 0xb5, 0xa8, 
0x55, 0x55, 0x55, 0x5d, 0x7b, 0xff, 0xda, 0xaa, 0xaa, 0xd5, 0x54, 
0xaa, 0xaa, 0xaa, 0xab, 0xae, 0xd6, 0xaa, 0xd6, 0xaa, 0xaa, 0xa8, 
0x55, 0x55, 0x55, 0x5d, 0x6b, 0x7d, 0xd6, 0x6a, 0xaa, 0xaa, 0xa8, 
0xaa, 0xb5, 0x55, 0xbb, 0xbd, 0xd6, 0xbb, 0x75, 0x55, 0x55, 0x54, 
0x55, 0x55, 0x5a, 0xf5, 0x6b, 0x7b, 0x55, 0x7d, 0x6a, 0xaa, 0xa8, 
0xad, 0xaa, 0xab, 0xfb, 0xdd, 0xad, 0xbe, 0x6f, 0x95, 0x55, 0x54, 
0x55, 0x55, 0x57, 0x72, 0xb6, 0xea, 0xd5, 0x7f, 0xeb, 0x5a, 0xa8, 
0xaa, 0xaa, 0xbf, 0xfb, 0xfb, 0xbf, 0x7b, 0xff, 0xfd, 0x55, 0x6c, 
0x55, 0x55, 0xff, 0xfa, 0xae, 0xea, 0xde, 0xf7, 0x7e, 0xaa, 0xa8, 
0xaa, 0xab, 0x7f, 0xfd, 0xff, 0xbf, 0xea, 0xff, 0xfb, 0xd5, 0x54, 
0x55, 0x57, 0xfd, 0xdf, 0x6a, 0xea, 0xbd, 0xff, 0xff, 0xf5, 0xa8, 
0xb6, 0xbf, 0xff, 0xfe, 0xff, 0xff, 0xef, 0xfb, 0xff, 0xfd, 0x54, 
0x55, 0x7f, 0xff, 0xff, 0xdb, 0x5a, 0xdb, 0xff, 0xff, 0xff, 0x54, 
0xaa, 0xff, 0x77, 0xff, 0x7f, 0xff, 0xfd, 0xef, 0xbd, 0xef, 0xa8, 
0x57, 0xf7, 0xff, 0xff, 0xda, 0xd6, 0xaf, 0xff, 0xff, 0xff, 0xf4, 
0xaf, 0xff, 0xff, 0xdf, 0x7f, 0xff, 0xfb, 0xff, 0xff, 0xfe, 0xf4, 
0x7f, 0xff, 0xff, 0xff, 0xee, 0xdb, 0x6f, 0xfd, 0xff, 0xbf, 0xf8, 
0xbe, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf7, 0xef, 0xff, 0xfc, 
0xff, 0xfd, 0xdf, 0xff, 0xff, 0xee, 0xdf, 0xdf, 0xff, 0xff, 0xfc, 
0xff, 0xef, 0xff, 0xfe, 0xef, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xec, 
0xfb, 0xff, 0xff, 0x7f, 0xff, 0xf7, 0xff, 0xdf, 0xff, 0xf7, 0xfc, 
0xef, 0xff, 0xff, 0xfb, 0xfe, 0xde, 0xff, 0x7e, 0xdf, 0xdf, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0x7f, 0xfc, 
0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xbc, 
0xff, 0xff, 0xff, 0x7f, 0xff, 0xb7, 0x7f, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xfd, 0xdb, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xfe, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xfd, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x7c, 
0xff, 0xff, 0xff, 0xff, 0x7f, 0xfb, 0xfd, 0xff, 0xdf, 0xff, 0xfc, 
0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xef, 0xfd, 0xff, 0xdf, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xbd, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfc, 
0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfc, 
0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0x7f, 0xfc, 
0xff, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xbf, 0xef, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xfc, 
0xfe, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xec, 
0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xf7, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfc, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xef, 0xfc
};

WiFiClient espClient;
PubSubClient client(espClient);

#define SpaceOfLine 5;
const char MyName[] = "Nguyen Duc Tien z ts";
const char MyEmail[] = "tiennd@soict.hust.edu.vn";
const char MyHandphone[] = "Tel: 091-313-7399";
const char MyOffice[] = "Adr: B1-801, SoICT";

void HelloWorld(char *string)
{
  display.setRotation(1);
  display.setFont(&FreeMonoBold9pt7b);
  display.setTextColor(GxEPD_BLACK);

  int16_t tbx;
  int16_t tby;
  uint16_t tbw; /// Chiều dài của dòng chữ
  uint16_t tbh; /// Độ cao của dòng chữ

  // Trả về kích thước dòng chữ
  display.getTextBounds(string + String(RST), 0, 0, &tbx, &tby, &tbw, &tbh);
  // Cột bắt đầu viết chữ
  uint16_t x = 0;
  // Dòng băt đầu viết chữ
  uint16_t y = 40;
  display.setFullWindow();
  display.firstPage();
  do
  {
    /// Vẽ lại toàn bộ nền trắng
    display.fillScreen(GxEPD_WHITE);

    // Căn lề giữa
    x = ((display.width() - tbw) / 2) - tbx;
    /// Thiết lập điểm vẽ về vị trí trên trái
    display.setCursor(x, y);
    /// Hiển thị dòng chữ
    display.print(string);
    // Chuyển sang dòng tiếp theo và giãn dòng
    y = y + tbh + 2 * SpaceOfLine;

    display.setTextColor(display.epd2.hasColor ? GxEPD_RED : GxEPD_BLACK);
    // Trả về kích thước dòng chữ
    display.getTextBounds(MyEmail, 0, 0, &tbx, &tby, &tbw, &tbh);
    // Căn lề giữa
    x = ((display.width() - tbw) / 2) - tbx;
    /// Thiết lập điểm vẽ về vị trí trên trái
    display.setCursor(x, y);
    /// Hiển thị dòng chữ
    display.print(MyEmail);
    // Chuyển sang dòng tiếp theo và giãn dòng
    y = y + tbh + SpaceOfLine;

    // Trả về kích thước dòng chữ
    display.getTextBounds(MyHandphone, 0, 0, &tbx, &tby, &tbw, &tbh);
    // Căn lề trái
    x = 10;
    /// Thiết lập điểm vẽ về vị trí trên trái
    display.setCursor(x, y);
    /// Hiển thị dòng chữ
    display.print(MyHandphone);
    // Chuyển sang dòng tiếp theo và giãn dòng
    y = y + tbh + SpaceOfLine;

    // Trả về kích thước dòng chữ
    display.getTextBounds(MyOffice, 0, 0, &tbx, &tby, &tbw, &tbh);
    // Căn lề trái
    x = 10;
    /// Thiết lập điểm vẽ về vị trí trên trái
    display.setCursor(x, y);
    /// Hiển thị dòng chữ
    display.print(MyOffice);
    // Chuyển sang dòng tiếp theo và giãn dòng
    y = y + tbh + SpaceOfLine;
  } while (display.nextPage());
}
void myInfo(unsigned char *image){
  display.setRotation(1);
  display.setFont(&FreeSans9pt7b);
  display.setTextColor(GxEPD_BLACK);
  display.setFullWindow();
  int16_t tbx;
  int16_t tby;
  uint16_t tbw;
  uint16_t tbh;
  uint16_t x = 0;
  uint16_t y = 40;
  display.firstPage();
  do{
    display.fillScreen(GxEPD_WHITE);
    display.fillRect(0, 0, 237, 128, GxEPD_BLACK);
    display.drawBitmap(0,0,image,237,128,GxEPD_WHITE);
    //display.getTextBounds(MyName,0,0,&tbx, &tby, &tbw, &tbh);
    // x = 87;
    // display.setCursor(x, y);
    // display.print(MyName);
    // y = y + tbh + SpaceOfLine;
    
    // display.getTextBounds(MyHandphone,0,0,&tbx, &tby, &tbw, &tbh);
    // x = 87;
    // display.setCursor(x, y);
    // display.print(MyHandphone);
    // y = y + tbh + SpaceOfLine;
    // display.getTextBounds(MyOffice,0,0,&tbx, &tby, &tbw, &tbh);
    // x = 87;
    // display.setCursor(x, y);
    // display.print(MyOffice);
  }
  while (display.nextPage()); 
}
void helloFullScreenPartialMode(char *string)
{
  // Serial.println("helloFullScreenPartialMode");
  const char fullscreen[] = "full screen update";
  const char fpm[] = "fast partial mode";
  const char spm[] = "slow partial mode";
  const char npm[] = "no partial mode";
  display.setPartialWindow(0, 0, display.width(), display.height());
  display.setRotation(1);
  display.setFont(&FreeMonoBold9pt7b);
  if (display.epd2.WIDTH < 104)
    display.setFont(0);
  display.setTextColor(GxEPD_BLACK);
  const char *updatemode;
  if (display.epd2.hasFastPartialUpdate)
  {
    updatemode = fpm;
  }
  else if (display.epd2.hasPartialUpdate)
  {
    updatemode = spm;
  }
  else
  {
    updatemode = npm;
  }
  // do this outside of the loop
  int16_t tbx, tby;
  uint16_t tbw, tbh;
  // center update text
  display.getTextBounds(fullscreen, 0, 0, &tbx, &tby, &tbw, &tbh);
  uint16_t utx = ((display.width() - tbw) / 2) - tbx;
  uint16_t uty = ((display.height() / 4)- tbh/2) - tby;
  Serial.println(display.height());
  Serial.println(display.width());
  Serial.println("test1");
  // center update mode
  display.getTextBounds(updatemode, 0, 0, &tbx, &tby, &tbw, &tbh);
  uint16_t umx = ((display.width() - tbw) / 2) - tbx;
  uint16_t umy = ((display.height() * 3 / 4) - tbh / 2) - tby;
  Serial.println(tbx);
  Serial.println(tby);
  Serial.println(tbw);
  Serial.println(tbh);
  // center MyName
  display.getTextBounds(string, 0, 0, &tbx, &tby, &tbw, &tbh);
  uint16_t hwx = ((display.width() - tbw) / 2) - tbx;
  uint16_t hwy = ((display.height() - tbh) /2) - tby;
  display.firstPage();
  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setCursor(hwx, hwy);
    display.print(string);
    display.setCursor(utx, uty);
    display.print(fullscreen);
    display.setCursor(umx, umy);
    display.print(updatemode);
  } while (display.nextPage());
  // Serial.println("helloFullScreenPartialMode done");
}

void showPartialUpdate()
{
  Serial.println("showPartialMode");
  // some useful background
  //HelloWorld();
  // use asymmetric values for test
  uint16_t box_x = 10;
  uint16_t box_y = 15;
  uint16_t box_w = 70;
  uint16_t box_h = 50;
  uint16_t cursor_y = box_y + box_h - 6;
  if (display.epd2.WIDTH < 104)
    cursor_y = box_y + 6;
  float value = 13.95;
  uint16_t incr = display.epd2.hasFastPartialUpdate ? 1 : 3;
  display.setFont(&FreeMonoBold9pt7b);
  if (display.epd2.WIDTH < 104)
    display.setFont(0);
  display.setTextColor(GxEPD_BLACK);
  // show where the update box is
  for (uint16_t r = 0; r < 4; r++)
  {
    display.setRotation(r);
    display.setPartialWindow(box_x, box_y, box_w, box_h);
    display.firstPage();
    do
    {
      display.fillRect(box_x, box_y, box_w, box_h, GxEPD_BLACK);
      // display.fillScreen(GxEPD_BLACK);
    } while (display.nextPage());
    delay(2000);
    display.firstPage();
    do
    {
      display.fillRect(box_x, box_y, box_w, box_h, GxEPD_WHITE);
    } while (display.nextPage());
    delay(1000);
  }
  // return;
  //  show updates in the update box
  for (uint16_t r = 0; r < 4; r++)
  {
    display.setRotation(r);
    display.setPartialWindow(box_x, box_y, box_w, box_h);
    for (uint16_t i = 1; i <= 10; i += incr)
    {
      display.firstPage();
      do
      {
        display.fillRect(box_x, box_y, box_w, box_h, GxEPD_WHITE);
        display.setCursor(box_x, cursor_y);
        display.print(value * i, 2);
      } while (display.nextPage());
      delay(500);
    }
    delay(1000);
    display.firstPage();
    do
    {
      display.fillRect(box_x, box_y, box_w, box_h, GxEPD_WHITE);
    } while (display.nextPage());
    delay(1000);
  }
  Serial.println("Hehehe");
}
void callback(char *topic, byte *payload, unsigned int length)
{
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  Serial.print("Message:");
  char string[length + 1];
  unsigned char image[length +1];
  for (int i = 0; i < length; i++)
  {
    //.print((char)payload[i]);
    image[i] = static_cast<unsigned char>(payload[i]);
  }
  string[length] = '\0';
  myInfo(image);
  // HelloWorld(string);
  // delay(3000);
  // helloFullScreenPartialMode(string);
  Serial.println();
  Serial.println("-----------------------");
}
void callbackImage(char *topic, byte *payload, unsigned int length)
{
  Serial.print("Message arrived in topic: ");
  // Serial.println(topic);
  for (int i = 0; i < length; i++) {
      Serial.println(payload[i]);
  }
  Serial.println(length);
  display.drawBitmap(50,50,payload,1,1,GxEPD_BLACK,GxEPD_WHITE);
  Serial.println();
  Serial.println("-----------------------");
  //if(==="sendImage")
}
void setup()
{
  pinMode(8, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  Serial.begin(9600);
  delay(10000);
  // connecting to a WiFi network
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
  Serial.println("display.init");
  display.init(115200, true, 50, false);
  Serial.println("HelloWorld");
  client.setServer(mqtt_broker, mqtt_port);
  client.setCallback(callback);
  client.setBufferSize(5000);
  while (!client.connected())
  {
    String client_id = "esp32-client-";
    client_id += String(WiFi.macAddress());
    Serial.printf("The client %s connects to the public mqtt broker\n", client_id.c_str());
    if (client.connect(client_id.c_str(), mqtt_username, mqtt_password))
    {
      Serial.println("Public emqx mqtt broker connected");
    }
    else
    {
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
    }
  }
  client.subscribe(topic);
  //HelloWorld();
  //myInfo();
  display.hibernate();
}

void loop()
{
  // put your main code here, to run repeatedly:
  client.loop();
}